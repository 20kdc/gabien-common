-- gabien-common - Cross-platform game and UI framework
-- Written starting in 2016 by contributors (see CREDITS.txt)
-- To the extent possible under law, the author(s) have dedicated all copyright and related and neighboring rights to this software to the public domain worldwide. This software is distributed without any warranty.
-- A copy of the Unlicense should have been supplied as COPYING.txt in this repository. Alternatively, you can find it at <https://unlicense.org/>.

-- tawa kama pona tan jan ale --

local lv = require("libvariant")

local initialDisclaimer = [[
/*
 * gabien-common - Cross-platform game and UI framework
 * Written starting in 2016 by contributors (see CREDITS.txt)
 * To the extent possible under law, the author(s) have dedicated all copyright and related and neighboring rights to this software to the public domain worldwide. This software is distributed without any warranty.
 * A copy of the Unlicense should have been supplied as COPYING.txt in this repository. Alternatively, you can find it at <https://unlicense.org/>.
 */
/* THIS FILE IS MACHINE GENERATED BY gencall.lua */
]]
local c = io.open("c/unacall.c", "w")

c:write(initialDisclaimer)
c:write([[
#include "una.h"
]])

-- Types
local types = {
 "int32_t",
 "int64_t",
 "float"
}

-- The big scary generator
local function macroArgs(argCount)
 c:write("(rt")
 for i = 0, argCount - 1 do
  c:write(", t" .. tostring(i))
 end
 c:write(")")
end

for argCount = 0, 6 do
 -- macro
 c:write("#define F" .. tostring(argCount))
 macroArgs(argCount)
 c:write(" ((rt (*)(")
 for i = 0, argCount - 1 do
  if i ~= 0 then c:write(", ") end
  c:write("t" .. tostring(i))
 end
 c:write(")) code)\n")

 c:write("#define X" .. tostring(argCount))
 macroArgs(argCount)
 c:write(" ((int64_t) (F" .. tostring(argCount))
 macroArgs(argCount)
 c:write("(")
 for i = 0, argCount - 1 do
  if i ~= 0 then c:write(", ") end
  c:write("(t" .. tostring(i) .. ") a" .. tostring(i))
 end
 c:write(")))\n")
 -- continue
 c:write("int64_t UNAI(c" .. tostring(argCount) .. ")(void * env, void * self, ")
 for i = 0, argCount - 1 do
  c:write("int64_t a" .. tostring(i) .. ", ")
 end
 c:write("int64_t code, int32_t variant) {\n")
 c:write("    switch (variant) {\n")
 local variantCount = lv.variantCount(argCount)
 for variant = 0, variantCount - 1 do
  c:write("    case " .. tostring(variant) .. ":\n")
  c:write("        return X" .. tostring(argCount) .. "(")
  local decomp = lv.decompile(argCount, variant)
  -- pop return type first
  c:write(types[table.remove(decomp, 1)])
  -- main args
  for j = 1, argCount do
   local t = types[table.remove(decomp, 1)]
   c:write(", " .. t)
  end
  c:write(");\n")
 end
 c:write("    }\n")
 c:write("    return 0;\n")
 c:write("}\n")
end
-- done!
c:close()

