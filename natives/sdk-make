#!/bin/sh
# tested using Zig 0.11.0-dev.2892+fd6200eda
. ./sdk-clean
mkdir -p $LIBUNA
COMMONFLAGS="-Wno-attributes -O4 -shared"
TARGETS="x86-linux-gnu"
TARGETS_W="x86-windows-gnu x86_64-windows-gnu"
TARGETS_M="x86_64-macos aarch64-macos"
TARGETS_NSL="x86_64-linux-gnu aarch64-linux-gnu riscv64-linux-gnu"
SOURCES="c/badgpu_jni.c c/badgpu/badgpu.c c/badgpu/badgpu_tce.c c/badgpu/badgpu_dl.c"
SOURCES_U="c/badgpu/badgpu_wsi_egl.c"
SOURCES_W="c/badgpu/badgpu_wsi_wgl.c"
SOURCES_M="c/badgpu/badgpu_wsi_cgl.c"
for TARGET in $TARGETS ; do
 echo $TARGET
 zig cc -target $TARGET -flto $SOURCES $SOURCES_U -o $LIBUNA/natives.$TARGET $COMMONFLAGS
done
for TARGET in $TARGETS_W ; do
 echo $TARGET
 zig cc -target $TARGET -flto $SOURCES $SOURCES_W -o $LIBUNA/natives.$TARGET $COMMONFLAGS -lgdi32 -lopengl32
 # Compile the EGL-using variant.
 zig cc -target $TARGET -flto $SOURCES $SOURCES_U -o $LIBUNA/natives.$TARGET.CX_BackPath $COMMONFLAGS -lgdi32 -lopengl32
done
# LTO not yet supported
for TARGET in $TARGETS_M ; do
 echo $TARGET
 zig cc -target $TARGET $SOURCES $SOURCES_M -o $LIBUNA/natives.$TARGET $COMMONFLAGS
 # Compile the EGL-using variant.
 zig cc -target $TARGET $SOURCES $SOURCES_U -o $LIBUNA/natives.$TARGET.CX_BackPath $COMMONFLAGS
done
# on most of the Linuxy targets, use "fake libc" (this particularly works well with the Androids)
for TARGET in $TARGETS_NSL ; do
 echo $TARGET
 zig cc -target $TARGET -flto $SOURCES $SOURCES_U -o $LIBUNA/natives.$TARGET $COMMONFLAGS -nostdlib
done
# ANDROID IS REALLY REALLY WEIRD
echo THE ANDROID BUILDS
doAndroidBuild() {
echo $1
zig cc -target $1 -flto $SOURCES $SOURCES_U -o $LIBUNA/natives.$1 $COMMONFLAGS -nostdlib $2/libc.so $2/libdl.so $2/libm.so
}
doAndroidBuild arm-linux-android /media/modus/External2/android-ndk-r9d/platforms/android-3/arch-arm/usr/lib
doAndroidBuild aarch64-linux-android /media/modus/External2/android-ndk-r12b/platforms/android-21/arch-arm64/usr/lib
doAndroidBuild x86-linux-android /media/modus/External2/android-ndk-r9d/platforms/android-9/arch-x86/usr/lib
doAndroidBuild x86_64-linux-android /media/modus/External2/android-ndk-r12b/platforms/android-21/arch-x86_64/usr/lib64
echo THE ANDROID BUILDS ARE OVER NOW
# ideally, would do 32-bit RISC-V, but I had errors with Zig and I can't figure out which ABI to use, so nope
# ideally, would do the BSDs, but no libc and can't override
rm -f $LIBUNA/*.lib
rm -f $LIBUNA/*.pdb
# strip anything we can
for x in `ls $LIBUNA`; do
 llvm-strip $LIBUNA/$x
done
# Maven
mvn package
mvn install
rm -rf ../natives-sdk
mkdir -p ../natives-sdk
# script that installs the build to the local Maven repo
cp sdk-install ../natives-sdk/
cp target/gabien-natives-0.666-SNAPSHOT.jar ../natives-sdk/natives.jar
cp ../COPYING.txt ../natives-sdk/
cp ../CREDITS.txt ../natives-sdk/

