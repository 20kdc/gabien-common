#!/bin/sh
# gabien-common - Cross-platform game and UI framework
# Written starting in 2016 by contributors (see CREDITS.txt)
# To the extent possible under law, the author(s) have dedicated all copyright and related and neighboring rights to this software to the public domain worldwide. This software is distributed without any warranty.
# A copy of the Unlicense should have been supplied as COPYING.txt in this repository. Alternatively, you can find it at <https://unlicense.org/>.

# tested using Zig 0.11.0-dev.2892+fd6200eda

. ./sdk-clean

set -e

mkdir -p $LIBUNA

if [ "$UNA_BUILD_ID" = "" ]; then
 echo "const char una_version[] = \"`date +%Y.%m.%d.%H.%M.%S`\";" > c/version.c
else
 echo "const char una_version[] = \"$UNA_BUILD_ID\";" > c/version.c
fi

COMMONFLAGS="-Wno-attributes -O4 -shared"
TARGETS="x86-linux-gnu"
TARGETS_M="x86_64-macos aarch64-macos"
TARGETS_NSL="x86_64-linux-gnu aarch64-linux-gnu riscv64-linux-gnu"
SOURCES="c/version.c c/badgpu_jni.c c/loader_jni.c c/vorbis_jni.c c/mp3_jni.c c/badgpu/badgpu.c c/badgpu/badgpu_gl.c c/badgpu/badgpu_glbind.c c/badgpu/badgpu_sw.c c/badgpu/badgpu_swtnl.c c/badgpu/badgpu_swrop.c c/badgpu/badgpu_tce.c c/badgpu/badgpu_dl.c c/badgpu/badgpu_wsi_egl.c"
SOURCES_U="c/badgpu/badgpu_wsi_zzz.c"
SOURCES_W="c/badgpu/badgpu_wsi_wgl.c"
SOURCES_M="c/badgpu/badgpu_wsi_cgl.c"

# Tools & etc.
ZIG=thirdparty/zig/zig
# in theory, we shouldn't be using API level 9 libraries, but you need to use those to get access to ANativeWindow_fromSurface in the NDK.
# assume it's a packaging error or something. if it isn't, then it isn't.
NDK_PLATFORM9=thirdparty/android-ndk-r9d/platforms/android-9
NDK_PLATFORM21=thirdparty/android-ndk-r12b/platforms/android-21
NDK_ARM_GCC=thirdparty/android-ndk-r9d/toolchains/arm-linux-androideabi-4.6/prebuilt/linux-x86_64/bin/arm-linux-androideabi-gcc
NDK_MIPS_GCC=thirdparty/android-ndk-r9d/toolchains/mipsel-linux-android-4.6/prebuilt/linux-x86_64/bin/mipsel-linux-android-gcc

# Continue...

for TARGET in $TARGETS ; do
 echo $TARGET
 "$ZIG" cc -target $TARGET -flto $SOURCES $SOURCES_U -o $LIBUNA/natives.$TARGET $COMMONFLAGS
done
# LTO not yet supported
for TARGET in $TARGETS_M ; do
 echo $TARGET
 "$ZIG" cc -target $TARGET $SOURCES $SOURCES_M -o $LIBUNA/natives.$TARGET $COMMONFLAGS
done
# on most of the Linuxy targets, use "fake libc" (this particularly works well with the Androids)
for TARGET in $TARGETS_NSL ; do
 echo $TARGET
 "$ZIG" cc -target $TARGET -flto $SOURCES $SOURCES_U -o $LIBUNA/natives.$TARGET $COMMONFLAGS -nostdlib
done
# Windows with style
doMinGWW64Build() {
 echo $1 mingw-w64
 $2-gcc -flto $SOURCES $SOURCES_W -o $LIBUNA/natives.$1 $COMMONFLAGS -lgdi32 -lopengl32 -Wl,--kill-at
 $2-strip $LIBUNA/natives.$1
}
doMinGWW64Build x86-windows-gnu i686-w64-mingw32
doMinGWW64Build x86_64-windows-gnu x86_64-w64-mingw32
# ANDROID IS REALLY REALLY WEIRD
echo THE ANDROID BUILDS
doAndroidBuild() {
echo $1 zig
 "$ZIG" cc -target $1 -flto -DANDROID $SOURCES $SOURCES_U c/android_jni.c -o $LIBUNA/natives.$1 $COMMONFLAGS -nostdlib $2/libc.so $2/libdl.so $2/libm.so $2/liblog.so $2/libandroid.so $2/libEGL.so $2/libGLESv1_CM.so -I $3
}
doAndroidBuildGCC() {
 echo $1 gcc
 $2 -DANDROID $SOURCES $SOURCES_U c/android_jni.c -o $LIBUNA/natives.$1 $COMMONFLAGS --sysroot $3 -ldl -lm -llog -landroid -lEGL -lGLESv1_CM
}
# this PARTICULAR ONE crashes Zig's clang for some reason
doAndroidBuildGCC arm-linux-android $NDK_ARM_GCC $NDK_PLATFORM9/arch-arm
doAndroidBuild aarch64-linux-android $NDK_PLATFORM21/arch-arm64/usr/lib    $NDK_PLATFORM21/arch-arm64/usr/include
doAndroidBuild x86-linux-android     $NDK_PLATFORM9/arch-x86/usr/lib       $NDK_PLATFORM9/arch-x86/usr/include
doAndroidBuild x86_64-linux-android  $NDK_PLATFORM21/arch-x86_64/usr/lib64 $NDK_PLATFORM21/arch-x86_64/usr/include
doAndroidBuildGCC mipsel-linux-android $NDK_MIPS_GCC $NDK_PLATFORM9/arch-mips
echo THE ANDROID BUILDS ARE OVER NOW
# ideally, would do 32-bit RISC-V, but I had errors with Zig and I can't figure out which ABI to use, so nope
# ideally, would do the BSDs, but no libc and can't override
rm -f $LIBUNA/*.lib
rm -f $LIBUNA/*.pdb
# strip anything we can
for x in `ls $LIBUNA` ; do
 llvm-strip $LIBUNA/$x || true
done

# Fake Maven metadata
mkdir -p src/main/resources/META-INF/maven/t20kdc.hs2/gabien-natives || exit
cp pom.xml src/main/resources/META-INF/maven/t20kdc.hs2/gabien-natives/pom.xml || exit

# "Compile" the "JAR"
# Someone's going to probably have to ask why I did this at some point. TLDR: This process scrubs any Maven metadata and zip metadata.
# I had hoped for hash-reproducability but it seems to be pretty difficult/impossible.
"$ZIG" build-exe ktsz.zig || exit
rm -f natives.jar || exit
cd src/main/resources || exit
../../../ktsz `find * -type f | LC_ALL=C sort -u` > ../../../natives.jar || exit
cd ../../.. || exit

# Install
./sdk-install

echo
echo "Build ID: $UNA_BUILD_ID"
echo "sha256sum: `sha256sum natives.jar`"
echo "content sums..."
sha256sum $LIBUNA/*
echo

